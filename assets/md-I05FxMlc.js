import{b as u,o as s,w as a,g as t,ad as l,v as i,x as c,S as n}from"./modules/vue-CRs45FuU.js";import{I as d}from"./slidev/default-BPNQ_srZ.js";import{u as f,f as p}from"./slidev/context-D4xzpGZa.js";import"./index-DPD7zQwK.js";import"./modules/shiki-CvQuTaB8.js";const b={__name:"lect-9.md__slidev_14",setup(m){const{$clicksContext:o,$frontmatter:r}=f();return o.setup(),(h,e)=>(s(),u(d,i(c(n(p)(n(r),13))),{default:a(()=>e[0]||(e[0]=[t("h2",null,[l("Writing to Files: "),t("code",null,"fprintf()"),l(" and "),t("code",null,"fputs()")],-1),t("ul",null,[t("li",null,[t("strong",null,[t("code",null,"fprintf(FILE *fp, const char *format, ...)"),l(":")]),t("ul",null,[t("li",null,[l("Writes formatted output to the file stream "),t("code",null,"fp"),l(", similar to how "),t("code",null,"printf"),l(" writes to "),t("code",null,"stdout"),l(".")]),t("li",null,[l("Converts data to text based on the "),t("code",null,"format"),l(" string and writes it to the file.")]),t("li",null,"Returns the number of characters written, or a negative value on error.")])]),t("li",null,[t("strong",null,[t("code",null,"fputs(const char *str, FILE *fp)"),l(":")]),t("ul",null,[t("li",null,[l("Writes the string "),t("code",null,"str"),l(" (up to, but not including, the null terminator) to the file stream "),t("code",null,"fp"),l(".")]),t("li",null,[l("Does "),t("strong",null,"not"),l(" automatically add a newline ("),t("code",null,"\\n"),l(") like "),t("code",null,"puts"),l(".")]),t("li",null,[l("Returns a non-negative value on success, or "),t("code",null,"EOF"),l(" on error.")])])])],-1)])),_:1},16))}};export{b as default};
